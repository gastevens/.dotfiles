#!/usr/bin/env bash

BIN_NAME=$(basename "$0")
COMMAND_NAME=$1
SUB_COMMAND_NAME=$2

# Set dotfiles directory
DOTFILES_DIR="$HOME/.dotfiles"

sub_help () {
  echo "Commands:"
  echo "   clean            Clean up caches (brew, cargo, gem, pip)"
  echo "   dock             Apply macOS Dock settings"
  echo "   duti             Set default apps for file types (UTI)"
  echo "   edit             Open dotfiles in IDE ($VISUAL) and Git GUI ($VISUAL_GIT)"
  echo "   help             This help message"
  echo "   macos            Apply macOS system defaults"
  echo "   migrate-apps     Migrate apps from Mac App Store to Homebrew"
  echo "   setup-managers   Install and configure package managers (asdf, mise, etc.)"
  echo "   setup-tools      Configure development tools (starship, eza, etc.)"
  echo "   test             Run tests"
  echo "   update           Update packages using topgrade"
  echo "   update-packages  Update all packages and generate new Brewfile"
  echo "   verify-setup     Verify dotfiles setup and configuration"
}

sub_clean () {
  echo "$ brew cleanup"
  brew cleanup
  echo "$ cargo cache --autoclean"
  cargo cache --autoclean
  echo "$ gem cleanup"
  gem cleanup
  echo "$ pip cache purge"
  pip cache purge
}

sub_dock () {
  . "${DOTFILES_DIR}/macos/dock.sh" && echo "Dock reloaded."
}

sub_edit () {
  sh -c "$VISUAL $DOTFILES_DIR"
  sh -c "$VISUAL_GIT $DOTFILES_DIR"
}

sub_test () {
  bats "$DOTFILES_DIR"/test/*.bats
}

sub_update () {
  echo "Running topgrade to update all packages..."
  topgrade
}

# Function for update-packages command
sub_update_packages () {
  if [ -x "${DOTFILES_DIR}/bin/dot-update-packages" ]; then
    "${DOTFILES_DIR}/bin/dot-update-packages" "$@"
  else
    echo "Error: update-packages script not found or not executable."
    echo "Check that ${DOTFILES_DIR}/bin/dot-update-packages exists and has execute permissions."
    return 1
  fi
}

# Function for verify-setup command
sub_verify_setup () {
  if [ -x "${DOTFILES_DIR}/bin/dot-verify-setup" ]; then
    "${DOTFILES_DIR}/bin/dot-verify-setup" "$@"
  else
    echo "Error: verify-setup script not found or not executable."
    echo "Check that ${DOTFILES_DIR}/bin/dot-verify-setup exists and has execute permissions."
    return 1
  fi
}

sub_migrate_apps () {
  if [ -x "${DOTFILES_DIR}/bin/dot-migrate-apps" ]; then
    "${DOTFILES_DIR}/bin/dot-migrate-apps" "$@"
  else
    echo "Error: migrate-apps script not found or not executable."
    echo "Check that ${DOTFILES_DIR}/bin/dot-migrate-apps exists and has execute permissions."
    return 1
  fi
}

sub_setup_tools () {
  if [ -x "${DOTFILES_DIR}/config/shell/tool-configs.sh" ]; then
    "${DOTFILES_DIR}/config/shell/tool-configs.sh" "$@"
  else
    echo "Error: tool-configs.sh script not found or not executable."
    echo "Check that ${DOTFILES_DIR}/config/shell/tool-configs.sh exists and has execute permissions."
    return 1
  fi
}

sub_setup_managers () {
  if [ -x "${DOTFILES_DIR}/install/package-managers.sh" ]; then
    "${DOTFILES_DIR}/install/package-managers.sh" "$@"
  else
    echo "Error: package-managers.sh script not found or not executable."
    echo "Check that ${DOTFILES_DIR}/install/package-managers.sh exists and has execute permissions."
    return 1
  fi
}

sub_duti () {
  duti -v "${DOTFILES_DIR}/install/duti"
}

sub_macos () {
  for DEFAULTS_FILE in "${DOTFILES_DIR}"/macos/defaults*.sh; do
    echo "Applying ${DEFAULTS_FILE}" && . "${DEFAULTS_FILE}"
  done
  echo "Done. Some changes may require a logout/restart to take effect."
}

case $COMMAND_NAME in
  "" | "-h" | "--help")
    sub_help
    ;;
  *)
    shift
    # Replace hyphens with underscores in command name for function call
    FUNCTION_NAME="sub_${COMMAND_NAME//-/_}"
    $FUNCTION_NAME $@
    if [ $? = 127 ]; then
      echo "'$COMMAND_NAME' is not a known command or has errors." >&2
      sub_help
      exit 1
    fi
    ;;
esac
